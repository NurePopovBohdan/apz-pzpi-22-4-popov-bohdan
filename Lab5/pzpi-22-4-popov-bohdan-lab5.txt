МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ


ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»



ЗВІТ
до лабораторної роботи №5 з дисципліни
«Аналіз та рефакторинг коду»
На тему: «Презентація готового проекта»





Виконав:	Перевірив:
ст. гр. ПЗПІ-22-4	ас. кафедри ПІ
Попов Богдан Сергійович	Дашенков Дмитро Сергійович

















Харків 2025
 
5 РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ
5.1 ІСТОРІЯ ЗМІН

Зміни в документі нотуються до таблиці 4.1.

Таблиця 5.1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	03.06.2025	0.1	Створено розділ «Історія змін»
2	03.06.2025	0.1	Створено розділ «Завдання»
3	03.06.2025	0.1	Створено розділ «Опис виконаної роботи»
4	03.06.2025	0.1	Створено розділ «Висновки»
5	03.06.2025	0.1	Додано додаток А з посиланням на відеоролик
6	03.06.2025	0.1	Додано додаток Б зі специфікацією API


5.2 ЗАВДАННЯ


Метою виконання цього завдання є повноцінне розгортання та інтеграція всіх ключових компонентів програмної системи "AutoCare", а також демонстрація її функціональності в реальних умовах. Система "AutoCare" розроблена для моніторингу стану автотранспорту та сповіщення користувачів про необхідність заміни деталей, і складається з чотирьох основних модулів: серверної частини, веб-інтерфейсу, мобільного додатку та IoT-підсистеми, яка базується на реальних датчиках, створених мною самостійно. Основна ціль полягає в забезпеченні безперервної та узгодженої роботи всіх цих компонентів, щоб гарантувати точний і своєчасний збір, обробку та відображення даних про стан автомобілів у реальному часі.
 
5.3 ОПИС ВИКОНАНОЇРОБОТИ


Програмна система "AutoCare" побудована на основі багаторівневої архітектури, що охоплює серверну частину, веб-інтерфейс, мобільний додаток та IoT-підсистему. Усі компоненти розроблені з використанням сучасних технологій, що забезпечують стабільність, масштабованість та зручність для користувачів.
Серверна частина
•	Технології: Node.js, Express.js, MongoDB
•	Опис: Серверна частина реалізована на базі Node.js із фреймворком Express.js, що забезпечує високу продуктивність і простоту розгортання. Для зберігання даних використовується NoSQL база даних MongoDB, яка ідеально підходить для роботи з неструктурованими даними, такими як показники реальних датчиків. Сервер надає RESTful API для взаємодії з клієнтськими додатками та обробки даних, отриманих від IoT-підсистеми через протокол MQTT. Автентифікація користувачів реалізована за допомогою JSON Web Tokens (JWT).
•	Розгортання: Для запуску серверної частини необхідно клонувати репозиторій, виконати команду npm install для встановлення залежностей, налаштувати підключення до MongoDB у файлі конфігурації (наприклад, .env), після чого запустити сервер командою npm start. Сервер доступний за адресою localhost:5000.
Веб-інтерфейс
•	Технології: React, Tailwind CSS, Axios
•	Опис: Веб-інтерфейс розроблено на базі бібліотеки React із використанням Tailwind CSS для створення адаптивного та естетичного дизайну. Користувачі можуть проходити реєстрацію та авторизацію, додавати або видаляти транспортні засоби, а також переглядати дані, отримані з реальних датчиків, таких як тиск у шинах, напруга батареї та знос гальмівних колодок. Взаємодія з сервером здійснюється через HTTP-запити за допомогою бібліотеки Axios.
•	Розгортання: Клонуйте репозиторій, виконайте npm install для встановлення залежностей, запустіть проєкт командою npm start. Веб-інтерфейс доступний за адресою localhost:3000.
Мобільний додаток
•	Технології: Kotlin, Android Studio, Retrofit
•	Опис: Мобільний додаток розроблено на мові Kotlin із застосуванням архітектури MVVM. Функціонал аналогічний веб-інтерфейсу: користувачі можуть реєструватися, додавати автомобілі та переглядати дані з реальних датчиків. Для мережевих запитів використано бібліотеку Retrofit, а відображення даних реалізовано через LiveData та ViewModel, що забезпечує реактивність інтерфейсу.
•	Розгортання: Клонуйте репозиторій, відкрийте проєкт у Android Studio, підключіть Android-пристрій або запустіть емулятор, після чого зберіть і запустіть додаток.
IoT-підсистема
•	Технології: Реальні датчики (тиск у шинах, напруга батареї, знос гальмівних колодок), Arduino IDE, ESP8266, MQTT
•	Опис: IoT-підсистема базується на реальних датчиках, які я розробив самостійно. Ці датчики включають сенсор тиску в шинах, сенсор напруги батареї та сенсор зносу гальмівних колодок. Дані зчитуються мікроконтролером ESP8266, який запрограмовано через Arduino IDE з використанням бібліотек ESP8266WiFi та PubSubClient. Кожен датчик підключено до аналогових входів ESP8266: тиск зчитується з A0, напруга батареї з A1, а знос гальмівних колодок з A2. Отримані дані обробляються (перевіряються на аномалії) і передаються на сервер через протокол MQTT. Для тестування системи використано платформу Wokwi, яка дозволила емулювати роботу датчиків до їх фізичної реалізації.
•	Розгортання: Клонуйте репозиторій із кодом для IoT-пристрою, відкрийте його в Arduino IDE, налаштуйте параметри Wi-Fi та MQTT-брокера у коді, завантажте прошивку на ESP8266. Альтернативно, запустіть емуляцію на Wokwi для перевірки функціональності.
Взаємодія компонентів
•	IoT-підсистема зчитує дані з реальних датчиків і передає їх на сервер через MQTT-брокер.
•	Сервер отримує дані через MQTT, обробляє їх (наприклад, перевіряє на відповідність допустимим значенням) і зберігає в базі даних MongoDB.
•	Веб-інтерфейс і мобільний додаток отримують актуальні дані з сервера через REST API та відображають їх користувачу в реальному часі.
•	Користувачі можуть переглядати стан автомобілів (тиск у шинах, напругу батареї, знос гальмівних колодок) і отримувати попередження про аномалії.
Використані інструменти та технології
•	Сервер: Node.js, Express.js, MongoDB, MQTT
•	Веб-клієнт: React, Tailwind CSS, Axios
•	Мобільний додаток: Kotlin, Android SDK, Retrofit
•	IoT: Arduino IDE, ESP8266, MQTT, реальні датчики (тиск у шинах, напруга батареї, знос гальмівних колодок)
•	Інші: Git для контролю версій, Postman для тестування API, Wokwi для емуляції IoT-пристрою


5.4 ВИСНОВКИ


У результаті виконаної роботи було успішно розгорнуто та протестовано програмну систему "AutoCare", яка включає серверну частину, веб-інтерфейс, мобільний додаток та IoT-підсистему, оснащену реальними датчиками, розробленими мною самостійно. Ця система демонструє високу функціональність і практичну цінність, забезпечуючи комплексний моніторинг стану автомобілів у реальному часі та видаючи своєчасні сповіщення про необхідність заміни деталей.
Завдяки інтеграції реальних датчиків, система "AutoCare" забезпечує точний моніторинг ключових параметрів автомобіля, таких як тиск у шинах, напруга батареї та знос гальмівних колодок. Це дозволяє користувачам своєчасно реагувати на потенційні проблеми, що значно підвищує безпеку експлуатації автотранспорту. Розробка власних датчиків довела їхню ефективність і масштабованість, що відкриває можливості для подальшого розширення асортименту моніторингів.
Таким чином, проєкт "AutoCare" не лише виконав поставлені завдання, а й заклав міцну основу для майбутніх інновацій у сфері автомобільного моніторингу та обслуговування.
 

ДОДАТОК А
Посилання на відеозапис доповіді та хронологічний опис

Відеозапис доповіді на YouTube: 
Хронологічний опис: https://youtu.be/hXcB_Pp2f9U
00:00 -Початок
00:16 -Вхід, перехід на головний екран.
00:31 - Додавання авто
00:58 - Перегляд статистики
01:30 - Відкриття проекту в Android Studio
01:46 - Вхід, перехід на головний екран.
02:16 - Додавання авто
02:45 - Перегляд статистики
02:57 - Переклад 
ДОДАТОК Б
Специфікація АРІ

API Документація для проєкту "Програмна система моніторингу стану зносу частин автотранспорту та сповіщення про заміну деталей «AutoCare»"

Загальна інформація

- Базовий URL: `https://api.autocare.com/v1`  
- Формат відповіді: JSON  
- Аутентифікація: JWT Token  
- Кодування: UTF-8  

 Аутентифікація

Реєстрація користувача
POST /auth/register


Тіло запиту:
json
{
    "email": "user@example.com",
    "password": "password123",
    "firstName": "Іван",
    "lastName": "Петренко",
    "phone": "+380501234567"
}


Успішна відповідь (201 Created):
json
{
    "status": "success",
    "message": "Користувача успішно зареєстровано",
    "data": {
        "userId": "12345",
        "email": "user@example.com",
        "firstName": "Іван",
        "lastName": "Петренко"
    }
}


Авторизація користувача

POST /auth/login


Тіло запиту:
{
    "email": "user@example.com",
    "password": "password123"
}


Успішна відповідь (200 OK):
{
    "status": "success",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}


 Управління автомобілями

Додавання нового автомобіля
POST /vehicles


Заголовки:
Authorization: Bearer <your_jwt_token>

Тіло запиту:
{
    "make": "Toyota",
    "model": "Camry",
    "year": 2020,
    "vin": "1HGCM82633A123456",
    "licensePlate": "AA1234BB",
    "initialMileage": 50000,
    "sensors": [
        {
            "type": "tirePressure",
            "serialNumber": "TP123"
        },
        {
            "type": "batteryVoltage",
            "serialNumber": "BV456"
        },
        {
            "type": "brakePadWear",
            "serialNumber": "BP789"
        }
    ]
}


Успішна відповідь (201 Created):
{
    "status": "success",
    "data": {
        "vehicleId": "v12345",
        "make": "Toyota",
        "model": "Camry",
        "year": 2020,
        "vin": "1HGCM82633A123456",
        "licensePlate": "AA1234BB",
        "currentMileage": 50000
    }
}

Отримання списку автомобілів користувача
GET /vehicles

Заголовки:

Authorization: Bearer <your_jwt_token>

Успішна відповідь (200 OK):
{
    "status": "success",
    "data": {
        "vehicles": [
            {
                "vehicleId": "v12345",
                "make": "Toyota",
                "model": "Camry",
                "year": 2020,
                "vin": "1HGCM82633A123456",
                "licensePlate": "AA1234BB",
                "currentMileage": 50000
            }
        ]
    }
}

 Моніторинг даних датчиків

Отримання даних з датчиків автомобіля
GET /sensors/data

Заголовки:
Authorization: Bearer <your_jwt_token>

Параметри запиту:
{
    "vehicleId": "v12345"
}

Успішна відповідь (200 OK):
{
    "status": "success",
    "data": {
        "tirePressure": {
            "value": 2.5,
            "unit": "bar",
            "timestamp": "2024-03-20T12:00:00Z"
        },
        "batteryVoltage": {
            "value": 12.6,
            "unit": "V",
            "timestamp": "2024-03-20T12:00:00Z"
        },
        "brakePadWear": {
            "value": 75,
            "unit": "%",
            "timestamp": "2024-03-20T12:00:00Z"
        }
    }
}

Відправка даних з датчиків (для IoT-пристрою)
POST /sensors/data


Тіло запиту:
{
    "vehicleId": "v12345",
    "sensorType": "tirePressure",
    "value": 2.5,
    "unit": "bar",
    "timestamp": "2024-03-20T12:00:00Z"
}

Успішна відповідь (201 Created):
{
    "status": "success",
    "message": "Дані успішно збережено"
}

 Сповіщення

Отримання сповіщень
GET /notifications

Заголовки:
Authorization: Bearer <your_jwt_token>

Параметри запиту:
{
    "vehicleId": "v12345",
    "status": "unread"
}

Успішна відповідь (200 OK):
{
    "status": "success",
    "data": {
        "notifications": [
            {
                "notificationId": "n12345",
                "vehicleId": "v12345",
                "type": "tirePressure",
                "message": "Низький тиск у шинах",
                "severity": "high",
                "createdAt": "2024-03-20T12:00:00Z",
                "status": "unread"
            }
        ]
    }
}

 Коди помилок
Код	Опис
400	Неправильний запит
401	Не авторизовано
403	Доступ заборонено
404	Ресурс не знайдено
422	Помилка валідації даних  |
500	Внутрішня помилка сервера|


 Розгортання

Вимоги до системи

- Серверна частина: Node.js 16+, MongoDB 5.0+, MQTT брокер (наприклад, Mosquitto), Redis (опціонально)  
- IoT-пристрій: ESP8266 з датчиками (тиск у шинах, напруга батареї, знос гальмівних колодок) або емулятор Wokwi  
- Веб-клієнт: Node.js 16+, браузер (Chrome, Firefox)  
- Мобільний додаток: Android Studio, Android SDK 31+  

# Змінні середовища

Створіть файл `.env` у кореневій папці серверної частини з наступними параметрами:

env
PORT=5000
MONGODB_URI=mongodb://localhost:27017/autocare
JWT_SECRET=your_jwt_secret_key
MQTT_BROKER_URL=mqtt://localhost:1883
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_USERNAME=your_smtp_username
SMTP_PASSWORD=your_smtp_password
REDIS_URL=redis://localhost:6379


# Кроки розгортання

1. Клонування репозиторію:
bash
git clone https://github.com/your-username/autocare-backend.git
cd autocare-backend


2. Встановлення залежностей:
bash
npm install


3. Налаштування змінних середовища:
- Скопіюйте `.env.example` до `.env` і відредагуйте його зі своїми значеннями.

4. Запуск сервера:
bash
npm start


# Docker розгортання
bash
# Збірка Docker образу
docker build -t autocare .

# Запуск контейнера
docker run -d \
  -p 5000:5000 \
  --name autocare \
  --env-file .env \
  autocare


# Налаштування IoT-пристрою

1. Підготовка Arduino IDE:
   - Встановіть Arduino IDE.
   - Додайте підтримку для ESP8266.
   - Встановіть бібліотеки ESP8266WiFi та PubSubClient.

2. Налаштування прошивки:
   - Відкрийте код прошивки в Arduino IDE.
   - Вкажіть параметри Wi-Fi мережі та налаштування MQTT-брокера.
   - Завантажте прошивку на ESP8266.

3. Підключення датчиків:
   - Датчик тиску в шинах → A0  
   - Датчик напруги батареї → A1  
   - Датчик зносу гальмівних колодок → A2  

4. Тестування з емулятором Wokwi (опціонально):
   - Створіть новий проект на Wokwi.
   - Імпортуйте код прошивки.
   - Налаштуйте віртуальні датчики.
   - Запустіть емуляцію.

 Безпека

- Усі запити до API захищені JWT токенами.  
- Паролі хешуються за допомогою bcrypt.  
- Для продакшн-розгортання використовуйте HTTPS.  
- Реалізовано обмеження кількості запитів (rate limiting) для запобігання DDoS-атакам.  
- Налаштуйте брандмауер для обмеження доступу до MQTT-брокера.  
- Використовуйте CORS політики для веб-клієнта.  

 Моніторинг та логування

- Prometheus: для збору метрик продуктивності.  
- Grafana: для візуалізації метрик.  
- ELK Stack: для централізованого логування подій та помилок.


